#!/usr/bin/env sh

# Creates new ssh keys with the provided password
# Passing no parameter prompts the user for a password
function config_ssh_genkey {
  local PASS; local PASS2
  if [ "$#" -eq "0" ]; then
    stty -echo
    echo -n "Password: "
    read PASS
    echo ""
    echo -n "Confirm: "
    read PASS2
    echo ""
    stty echo
    [ "$PASS" != "$PASS2" ] && { echo "Passwords do not match" >&2; return 1; }
  elif [ "$#" -eq "1" ]; then
    PASS="$1"
  else
    return 1
  fi

  [ ! -d "$HOME/.ssh" ] && mkdir "$HOME/.ssh"
  touch $HOME/.ssh/id_{rsa,ecdsa}
  chmod 0600 $HOME/.ssh/id_{rsa,ecdsa}
  if [ "$PASS" = "" ]; then
    openssl genrsa -out "$HOME/.ssh/id_rsa" 4096
	echo $(ssh-keygen -yf "$HOME/.ssh/id_rsa") $(hostname) > "$HOME/.ssh/id_rsa.pub"
	openssl ecparam -genkey -name secp521r1 -out "$HOME/.ssh/id_ecdsa"
	echo $(ssh-keygen -yf "$HOME/.ssh/id_ecdsa") $(hostname) > "$HOME/.ssh/id_ecdsa.pub"
  else
	openssl genrsa -aes256 -passout "pass:$PASS" -out "$HOME/.ssh/id_rsa" 4096
	echo $(ssh-keygen -P "$PASS" -yf "$HOME/.ssh/id_rsa") $(hostname) > "$HOME/.ssh/id_rsa.pub"
	openssl ecparam -genkey -name secp521r1 | openssl ec -aes256 -passout "pass:$PASS" -out "$HOME/.ssh/id_ecdsa"
	echo $(ssh-keygen -P "$PASS" -yf "$HOME/.ssh/id_ecdsa") $(hostname) > "$HOME/.ssh/id_ecdsa.pub"
  fi
}

# Create the keys from the git repo
function config_ssh_defkey {
  [ -f "$(dir_config)" ]
}

# Updates the configuration files and all of the submodules
function config_update {
    echo ""
}
